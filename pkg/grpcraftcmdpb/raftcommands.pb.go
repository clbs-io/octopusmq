// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: raftcommands.proto

package grpcraftcmdpb

import (
	protobuf "github.com/clbs-io/octopusmq/api/protobuf"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RaftCommand struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Command:
	//
	//	*RaftCommand_CreateQueue
	//	*RaftCommand_DeleteQueue
	//	*RaftCommand_PauseResumeQueue
	//	*RaftCommand_PurgeItems
	//	*RaftCommand_StorageCommands
	//	*RaftCommand_StorageDeleteIds
	//	*RaftCommand_StartNoop
	//	*RaftCommand_ResizeQueue
	//	*RaftCommand_CreateStorage
	//	*RaftCommand_DeleteStorage
	Command       isRaftCommand_Command `protobuf_oneof:"command"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaftCommand) Reset() {
	*x = RaftCommand{}
	mi := &file_raftcommands_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftCommand) ProtoMessage() {}

func (x *RaftCommand) ProtoReflect() protoreflect.Message {
	mi := &file_raftcommands_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftCommand.ProtoReflect.Descriptor instead.
func (*RaftCommand) Descriptor() ([]byte, []int) {
	return file_raftcommands_proto_rawDescGZIP(), []int{0}
}

func (x *RaftCommand) GetCommand() isRaftCommand_Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *RaftCommand) GetCreateQueue() *RaftCreateQueue {
	if x != nil {
		if x, ok := x.Command.(*RaftCommand_CreateQueue); ok {
			return x.CreateQueue
		}
	}
	return nil
}

func (x *RaftCommand) GetDeleteQueue() *protobuf.DeleteQueueRequest {
	if x != nil {
		if x, ok := x.Command.(*RaftCommand_DeleteQueue); ok {
			return x.DeleteQueue
		}
	}
	return nil
}

func (x *RaftCommand) GetPauseResumeQueue() *RaftPauseResumeQueue {
	if x != nil {
		if x, ok := x.Command.(*RaftCommand_PauseResumeQueue); ok {
			return x.PauseResumeQueue
		}
	}
	return nil
}

func (x *RaftCommand) GetPurgeItems() *RaftPurgeItems {
	if x != nil {
		if x, ok := x.Command.(*RaftCommand_PurgeItems); ok {
			return x.PurgeItems
		}
	}
	return nil
}

func (x *RaftCommand) GetStorageCommands() *RaftStorageCommands {
	if x != nil {
		if x, ok := x.Command.(*RaftCommand_StorageCommands); ok {
			return x.StorageCommands
		}
	}
	return nil
}

func (x *RaftCommand) GetStorageDeleteIds() *RaftStorageDeleteIds {
	if x != nil {
		if x, ok := x.Command.(*RaftCommand_StorageDeleteIds); ok {
			return x.StorageDeleteIds
		}
	}
	return nil
}

func (x *RaftCommand) GetStartNoop() *RaftStartNoop {
	if x != nil {
		if x, ok := x.Command.(*RaftCommand_StartNoop); ok {
			return x.StartNoop
		}
	}
	return nil
}

func (x *RaftCommand) GetResizeQueue() *protobuf.ResizeQueueRequest {
	if x != nil {
		if x, ok := x.Command.(*RaftCommand_ResizeQueue); ok {
			return x.ResizeQueue
		}
	}
	return nil
}

func (x *RaftCommand) GetCreateStorage() *RaftCreateStorage {
	if x != nil {
		if x, ok := x.Command.(*RaftCommand_CreateStorage); ok {
			return x.CreateStorage
		}
	}
	return nil
}

func (x *RaftCommand) GetDeleteStorage() *protobuf.DeleteStorageRequest {
	if x != nil {
		if x, ok := x.Command.(*RaftCommand_DeleteStorage); ok {
			return x.DeleteStorage
		}
	}
	return nil
}

type isRaftCommand_Command interface {
	isRaftCommand_Command()
}

type RaftCommand_CreateQueue struct {
	CreateQueue *RaftCreateQueue `protobuf:"bytes,1,opt,name=create_queue,json=createQueue,proto3,oneof"`
}

type RaftCommand_DeleteQueue struct {
	DeleteQueue *protobuf.DeleteQueueRequest `protobuf:"bytes,2,opt,name=delete_queue,json=deleteQueue,proto3,oneof"`
}

type RaftCommand_PauseResumeQueue struct {
	PauseResumeQueue *RaftPauseResumeQueue `protobuf:"bytes,3,opt,name=pause_resume_queue,json=pauseResumeQueue,proto3,oneof"`
}

type RaftCommand_PurgeItems struct {
	PurgeItems *RaftPurgeItems `protobuf:"bytes,4,opt,name=purge_items,json=purgeItems,proto3,oneof"`
}

type RaftCommand_StorageCommands struct {
	// internal storage commands
	StorageCommands *RaftStorageCommands `protobuf:"bytes,5,opt,name=storage_commands,json=storageCommands,proto3,oneof"`
}

type RaftCommand_StorageDeleteIds struct {
	StorageDeleteIds *RaftStorageDeleteIds `protobuf:"bytes,6,opt,name=storage_delete_ids,json=storageDeleteIds,proto3,oneof"`
}

type RaftCommand_StartNoop struct {
	// starting hack
	StartNoop *RaftStartNoop `protobuf:"bytes,7,opt,name=start_noop,json=startNoop,proto3,oneof"`
}

type RaftCommand_ResizeQueue struct {
	// next commands
	ResizeQueue *protobuf.ResizeQueueRequest `protobuf:"bytes,8,opt,name=resize_queue,json=resizeQueue,proto3,oneof"`
}

type RaftCommand_CreateStorage struct {
	// storage
	CreateStorage *RaftCreateStorage `protobuf:"bytes,9,opt,name=create_storage,json=createStorage,proto3,oneof"`
}

type RaftCommand_DeleteStorage struct {
	DeleteStorage *protobuf.DeleteStorageRequest `protobuf:"bytes,10,opt,name=delete_storage,json=deleteStorage,proto3,oneof"`
}

func (*RaftCommand_CreateQueue) isRaftCommand_Command() {}

func (*RaftCommand_DeleteQueue) isRaftCommand_Command() {}

func (*RaftCommand_PauseResumeQueue) isRaftCommand_Command() {}

func (*RaftCommand_PurgeItems) isRaftCommand_Command() {}

func (*RaftCommand_StorageCommands) isRaftCommand_Command() {}

func (*RaftCommand_StorageDeleteIds) isRaftCommand_Command() {}

func (*RaftCommand_StartNoop) isRaftCommand_Command() {}

func (*RaftCommand_ResizeQueue) isRaftCommand_Command() {}

func (*RaftCommand_CreateStorage) isRaftCommand_Command() {}

func (*RaftCommand_DeleteStorage) isRaftCommand_Command() {}

type RaftCreateQueue struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	QueueId       uint32                       `protobuf:"varint,1,opt,name=queue_id,json=queueId,proto3" json:"queue_id,omitempty"`
	Queue         *protobuf.CreateQueueRequest `protobuf:"bytes,2,opt,name=queue,proto3" json:"queue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaftCreateQueue) Reset() {
	*x = RaftCreateQueue{}
	mi := &file_raftcommands_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftCreateQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftCreateQueue) ProtoMessage() {}

func (x *RaftCreateQueue) ProtoReflect() protoreflect.Message {
	mi := &file_raftcommands_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftCreateQueue.ProtoReflect.Descriptor instead.
func (*RaftCreateQueue) Descriptor() ([]byte, []int) {
	return file_raftcommands_proto_rawDescGZIP(), []int{1}
}

func (x *RaftCreateQueue) GetQueueId() uint32 {
	if x != nil {
		return x.QueueId
	}
	return 0
}

func (x *RaftCreateQueue) GetQueue() *protobuf.CreateQueueRequest {
	if x != nil {
		return x.Queue
	}
	return nil
}

type RaftPauseResumeQueue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QueueName     string                 `protobuf:"bytes,1,opt,name=queue_name,json=queueName,proto3" json:"queue_name,omitempty"`
	Pause         bool                   `protobuf:"varint,2,opt,name=pause,proto3" json:"pause,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaftPauseResumeQueue) Reset() {
	*x = RaftPauseResumeQueue{}
	mi := &file_raftcommands_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftPauseResumeQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftPauseResumeQueue) ProtoMessage() {}

func (x *RaftPauseResumeQueue) ProtoReflect() protoreflect.Message {
	mi := &file_raftcommands_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftPauseResumeQueue.ProtoReflect.Descriptor instead.
func (*RaftPauseResumeQueue) Descriptor() ([]byte, []int) {
	return file_raftcommands_proto_rawDescGZIP(), []int{2}
}

func (x *RaftPauseResumeQueue) GetQueueName() string {
	if x != nil {
		return x.QueueName
	}
	return ""
}

func (x *RaftPauseResumeQueue) GetPause() bool {
	if x != nil {
		return x.Pause
	}
	return false
}

type RaftPurgeItems struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaftPurgeItems) Reset() {
	*x = RaftPurgeItems{}
	mi := &file_raftcommands_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftPurgeItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftPurgeItems) ProtoMessage() {}

func (x *RaftPurgeItems) ProtoReflect() protoreflect.Message {
	mi := &file_raftcommands_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftPurgeItems.ProtoReflect.Descriptor instead.
func (*RaftPurgeItems) Descriptor() ([]byte, []int) {
	return file_raftcommands_proto_rawDescGZIP(), []int{3}
}

type RaftStartNoop struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Uuid          string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaftStartNoop) Reset() {
	*x = RaftStartNoop{}
	mi := &file_raftcommands_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftStartNoop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftStartNoop) ProtoMessage() {}

func (x *RaftStartNoop) ProtoReflect() protoreflect.Message {
	mi := &file_raftcommands_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftStartNoop.ProtoReflect.Descriptor instead.
func (*RaftStartNoop) Descriptor() ([]byte, []int) {
	return file_raftcommands_proto_rawDescGZIP(), []int{4}
}

func (x *RaftStartNoop) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *RaftStartNoop) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type RaftStorageCommands struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Commands      []*RaftStorageCommand  `protobuf:"bytes,2,rep,name=commands,proto3" json:"commands,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaftStorageCommands) Reset() {
	*x = RaftStorageCommands{}
	mi := &file_raftcommands_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftStorageCommands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftStorageCommands) ProtoMessage() {}

func (x *RaftStorageCommands) ProtoReflect() protoreflect.Message {
	mi := &file_raftcommands_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftStorageCommands.ProtoReflect.Descriptor instead.
func (*RaftStorageCommands) Descriptor() ([]byte, []int) {
	return file_raftcommands_proto_rawDescGZIP(), []int{5}
}

func (x *RaftStorageCommands) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RaftStorageCommands) GetCommands() []*RaftStorageCommand {
	if x != nil {
		return x.Commands
	}
	return nil
}

type RaftStorageDeleteIds struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ids           []uint64               `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaftStorageDeleteIds) Reset() {
	*x = RaftStorageDeleteIds{}
	mi := &file_raftcommands_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftStorageDeleteIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftStorageDeleteIds) ProtoMessage() {}

func (x *RaftStorageDeleteIds) ProtoReflect() protoreflect.Message {
	mi := &file_raftcommands_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftStorageDeleteIds.ProtoReflect.Descriptor instead.
func (*RaftStorageDeleteIds) Descriptor() ([]byte, []int) {
	return file_raftcommands_proto_rawDescGZIP(), []int{6}
}

func (x *RaftStorageDeleteIds) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type RaftStorageCommand struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Command:
	//
	//	*RaftStorageCommand_Delete
	//	*RaftStorageCommand_Insert
	//	*RaftStorageCommand_Flags
	//	*RaftStorageCommand_Ttl
	//	*RaftStorageCommand_Update
	Command       isRaftStorageCommand_Command `protobuf_oneof:"command"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaftStorageCommand) Reset() {
	*x = RaftStorageCommand{}
	mi := &file_raftcommands_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftStorageCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftStorageCommand) ProtoMessage() {}

func (x *RaftStorageCommand) ProtoReflect() protoreflect.Message {
	mi := &file_raftcommands_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftStorageCommand.ProtoReflect.Descriptor instead.
func (*RaftStorageCommand) Descriptor() ([]byte, []int) {
	return file_raftcommands_proto_rawDescGZIP(), []int{7}
}

func (x *RaftStorageCommand) GetCommand() isRaftStorageCommand_Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *RaftStorageCommand) GetDelete() *RaftStorageDelete {
	if x != nil {
		if x, ok := x.Command.(*RaftStorageCommand_Delete); ok {
			return x.Delete
		}
	}
	return nil
}

func (x *RaftStorageCommand) GetInsert() *RaftStorageInsert {
	if x != nil {
		if x, ok := x.Command.(*RaftStorageCommand_Insert); ok {
			return x.Insert
		}
	}
	return nil
}

func (x *RaftStorageCommand) GetFlags() *RaftStorageFlags {
	if x != nil {
		if x, ok := x.Command.(*RaftStorageCommand_Flags); ok {
			return x.Flags
		}
	}
	return nil
}

func (x *RaftStorageCommand) GetTtl() *RaftStorageTtl {
	if x != nil {
		if x, ok := x.Command.(*RaftStorageCommand_Ttl); ok {
			return x.Ttl
		}
	}
	return nil
}

func (x *RaftStorageCommand) GetUpdate() *RaftStorageUpdate {
	if x != nil {
		if x, ok := x.Command.(*RaftStorageCommand_Update); ok {
			return x.Update
		}
	}
	return nil
}

type isRaftStorageCommand_Command interface {
	isRaftStorageCommand_Command()
}

type RaftStorageCommand_Delete struct {
	Delete *RaftStorageDelete `protobuf:"bytes,1,opt,name=delete,proto3,oneof"`
}

type RaftStorageCommand_Insert struct {
	Insert *RaftStorageInsert `protobuf:"bytes,2,opt,name=insert,proto3,oneof"`
}

type RaftStorageCommand_Flags struct {
	Flags *RaftStorageFlags `protobuf:"bytes,3,opt,name=flags,proto3,oneof"`
}

type RaftStorageCommand_Ttl struct {
	Ttl *RaftStorageTtl `protobuf:"bytes,4,opt,name=ttl,proto3,oneof"`
}

type RaftStorageCommand_Update struct {
	Update *RaftStorageUpdate `protobuf:"bytes,5,opt,name=update,proto3,oneof"` // can be RaftStorageInsert, but be more explicit about changed fields here
}

func (*RaftStorageCommand_Delete) isRaftStorageCommand_Command() {}

func (*RaftStorageCommand_Insert) isRaftStorageCommand_Command() {}

func (*RaftStorageCommand_Flags) isRaftStorageCommand_Command() {}

func (*RaftStorageCommand_Ttl) isRaftStorageCommand_Command() {}

func (*RaftStorageCommand_Update) isRaftStorageCommand_Command() {}

type RaftStorageDelete struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaftStorageDelete) Reset() {
	*x = RaftStorageDelete{}
	mi := &file_raftcommands_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftStorageDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftStorageDelete) ProtoMessage() {}

func (x *RaftStorageDelete) ProtoReflect() protoreflect.Message {
	mi := &file_raftcommands_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftStorageDelete.ProtoReflect.Descriptor instead.
func (*RaftStorageDelete) Descriptor() ([]byte, []int) {
	return file_raftcommands_proto_rawDescGZIP(), []int{8}
}

func (x *RaftStorageDelete) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RaftStorageInsert struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ttl           uint64                 `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Priority      uint32                 `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	Flags         uint32                 `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"`
	Hash          uint64                 `protobuf:"varint,5,opt,name=hash,proto3" json:"hash,omitempty"`
	Key           []byte                 `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaftStorageInsert) Reset() {
	*x = RaftStorageInsert{}
	mi := &file_raftcommands_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftStorageInsert) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftStorageInsert) ProtoMessage() {}

func (x *RaftStorageInsert) ProtoReflect() protoreflect.Message {
	mi := &file_raftcommands_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftStorageInsert.ProtoReflect.Descriptor instead.
func (*RaftStorageInsert) Descriptor() ([]byte, []int) {
	return file_raftcommands_proto_rawDescGZIP(), []int{9}
}

func (x *RaftStorageInsert) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RaftStorageInsert) GetTtl() uint64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *RaftStorageInsert) GetPriority() uint32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *RaftStorageInsert) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *RaftStorageInsert) GetHash() uint64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *RaftStorageInsert) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RaftStorageInsert) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type RaftStorageUpdate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ttl           uint64                 `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Flags         uint32                 `protobuf:"varint,4,opt,name=flags,proto3" json:"flags,omitempty"` // intentionally missing fields from insert here
	Hash          uint64                 `protobuf:"varint,5,opt,name=hash,proto3" json:"hash,omitempty"`
	Key           []byte                 `protobuf:"bytes,6,opt,name=key,proto3" json:"key,omitempty"`
	Value         []byte                 `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaftStorageUpdate) Reset() {
	*x = RaftStorageUpdate{}
	mi := &file_raftcommands_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftStorageUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftStorageUpdate) ProtoMessage() {}

func (x *RaftStorageUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_raftcommands_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftStorageUpdate.ProtoReflect.Descriptor instead.
func (*RaftStorageUpdate) Descriptor() ([]byte, []int) {
	return file_raftcommands_proto_rawDescGZIP(), []int{10}
}

func (x *RaftStorageUpdate) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RaftStorageUpdate) GetTtl() uint64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *RaftStorageUpdate) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *RaftStorageUpdate) GetHash() uint64 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *RaftStorageUpdate) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RaftStorageUpdate) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type RaftStorageFlags struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Flags         uint32                 `protobuf:"varint,2,opt,name=flags,proto3" json:"flags,omitempty"`
	Mask          uint32                 `protobuf:"varint,3,opt,name=mask,proto3" json:"mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaftStorageFlags) Reset() {
	*x = RaftStorageFlags{}
	mi := &file_raftcommands_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftStorageFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftStorageFlags) ProtoMessage() {}

func (x *RaftStorageFlags) ProtoReflect() protoreflect.Message {
	mi := &file_raftcommands_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftStorageFlags.ProtoReflect.Descriptor instead.
func (*RaftStorageFlags) Descriptor() ([]byte, []int) {
	return file_raftcommands_proto_rawDescGZIP(), []int{11}
}

func (x *RaftStorageFlags) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RaftStorageFlags) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

func (x *RaftStorageFlags) GetMask() uint32 {
	if x != nil {
		return x.Mask
	}
	return 0
}

type RaftStorageTtl struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Ttl           uint64                 `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaftStorageTtl) Reset() {
	*x = RaftStorageTtl{}
	mi := &file_raftcommands_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftStorageTtl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftStorageTtl) ProtoMessage() {}

func (x *RaftStorageTtl) ProtoReflect() protoreflect.Message {
	mi := &file_raftcommands_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftStorageTtl.ProtoReflect.Descriptor instead.
func (*RaftStorageTtl) Descriptor() ([]byte, []int) {
	return file_raftcommands_proto_rawDescGZIP(), []int{12}
}

func (x *RaftStorageTtl) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RaftStorageTtl) GetTtl() uint64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

type RaftCreateStorage struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	StorageId     uint32                         `protobuf:"varint,1,opt,name=storage_id,json=storageId,proto3" json:"storage_id,omitempty"`
	Storage       *protobuf.CreateStorageRequest `protobuf:"bytes,2,opt,name=storage,proto3" json:"storage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RaftCreateStorage) Reset() {
	*x = RaftCreateStorage{}
	mi := &file_raftcommands_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RaftCreateStorage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaftCreateStorage) ProtoMessage() {}

func (x *RaftCreateStorage) ProtoReflect() protoreflect.Message {
	mi := &file_raftcommands_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaftCreateStorage.ProtoReflect.Descriptor instead.
func (*RaftCreateStorage) Descriptor() ([]byte, []int) {
	return file_raftcommands_proto_rawDescGZIP(), []int{13}
}

func (x *RaftCreateStorage) GetStorageId() uint32 {
	if x != nil {
		return x.StorageId
	}
	return 0
}

func (x *RaftCreateStorage) GetStorage() *protobuf.CreateStorageRequest {
	if x != nil {
		return x.Storage
	}
	return nil
}

var File_raftcommands_proto protoreflect.FileDescriptor

const file_raftcommands_proto_rawDesc = "" +
	"\n" +
	"\x12raftcommands.proto\x12\x1eio.clbs.octopusmq.grpc.raftcmd\x1a\x0emessages.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\xa0\a\n" +
	"\vRaftCommand\x12T\n" +
	"\fcreate_queue\x18\x01 \x01(\v2/.io.clbs.octopusmq.grpc.raftcmd.RaftCreateQueueH\x00R\vcreateQueue\x12S\n" +
	"\fdelete_queue\x18\x02 \x01(\v2..io.clbs.octopusmq.protobuf.DeleteQueueRequestH\x00R\vdeleteQueue\x12d\n" +
	"\x12pause_resume_queue\x18\x03 \x01(\v24.io.clbs.octopusmq.grpc.raftcmd.RaftPauseResumeQueueH\x00R\x10pauseResumeQueue\x12Q\n" +
	"\vpurge_items\x18\x04 \x01(\v2..io.clbs.octopusmq.grpc.raftcmd.RaftPurgeItemsH\x00R\n" +
	"purgeItems\x12`\n" +
	"\x10storage_commands\x18\x05 \x01(\v23.io.clbs.octopusmq.grpc.raftcmd.RaftStorageCommandsH\x00R\x0fstorageCommands\x12d\n" +
	"\x12storage_delete_ids\x18\x06 \x01(\v24.io.clbs.octopusmq.grpc.raftcmd.RaftStorageDeleteIdsH\x00R\x10storageDeleteIds\x12N\n" +
	"\n" +
	"start_noop\x18\a \x01(\v2-.io.clbs.octopusmq.grpc.raftcmd.RaftStartNoopH\x00R\tstartNoop\x12S\n" +
	"\fresize_queue\x18\b \x01(\v2..io.clbs.octopusmq.protobuf.ResizeQueueRequestH\x00R\vresizeQueue\x12Z\n" +
	"\x0ecreate_storage\x18\t \x01(\v21.io.clbs.octopusmq.grpc.raftcmd.RaftCreateStorageH\x00R\rcreateStorage\x12Y\n" +
	"\x0edelete_storage\x18\n" +
	" \x01(\v20.io.clbs.octopusmq.protobuf.DeleteStorageRequestH\x00R\rdeleteStorageB\t\n" +
	"\acommand\"r\n" +
	"\x0fRaftCreateQueue\x12\x19\n" +
	"\bqueue_id\x18\x01 \x01(\rR\aqueueId\x12D\n" +
	"\x05queue\x18\x02 \x01(\v2..io.clbs.octopusmq.protobuf.CreateQueueRequestR\x05queue\"K\n" +
	"\x14RaftPauseResumeQueue\x12\x1d\n" +
	"\n" +
	"queue_name\x18\x01 \x01(\tR\tqueueName\x12\x14\n" +
	"\x05pause\x18\x02 \x01(\bR\x05pause\"\x10\n" +
	"\x0eRaftPurgeItems\"^\n" +
	"\rRaftStartNoop\x129\n" +
	"\n" +
	"start_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x12\x12\n" +
	"\x04uuid\x18\x02 \x01(\tR\x04uuid\"u\n" +
	"\x13RaftStorageCommands\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12N\n" +
	"\bcommands\x18\x02 \x03(\v22.io.clbs.octopusmq.grpc.raftcmd.RaftStorageCommandR\bcommands\"(\n" +
	"\x14RaftStorageDeleteIds\x12\x10\n" +
	"\x03ids\x18\x01 \x03(\x04R\x03ids\"\x94\x03\n" +
	"\x12RaftStorageCommand\x12K\n" +
	"\x06delete\x18\x01 \x01(\v21.io.clbs.octopusmq.grpc.raftcmd.RaftStorageDeleteH\x00R\x06delete\x12K\n" +
	"\x06insert\x18\x02 \x01(\v21.io.clbs.octopusmq.grpc.raftcmd.RaftStorageInsertH\x00R\x06insert\x12H\n" +
	"\x05flags\x18\x03 \x01(\v20.io.clbs.octopusmq.grpc.raftcmd.RaftStorageFlagsH\x00R\x05flags\x12B\n" +
	"\x03ttl\x18\x04 \x01(\v2..io.clbs.octopusmq.grpc.raftcmd.RaftStorageTtlH\x00R\x03ttl\x12K\n" +
	"\x06update\x18\x05 \x01(\v21.io.clbs.octopusmq.grpc.raftcmd.RaftStorageUpdateH\x00R\x06updateB\t\n" +
	"\acommand\"#\n" +
	"\x11RaftStorageDelete\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x04R\x02id\"\xa3\x01\n" +
	"\x11RaftStorageInsert\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x04R\x02id\x12\x10\n" +
	"\x03ttl\x18\x02 \x01(\x04R\x03ttl\x12\x1a\n" +
	"\bpriority\x18\x03 \x01(\rR\bpriority\x12\x14\n" +
	"\x05flags\x18\x04 \x01(\rR\x05flags\x12\x12\n" +
	"\x04hash\x18\x05 \x01(\x04R\x04hash\x12\x10\n" +
	"\x03key\x18\x06 \x01(\fR\x03key\x12\x14\n" +
	"\x05value\x18\a \x01(\fR\x05value\"\x87\x01\n" +
	"\x11RaftStorageUpdate\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x04R\x02id\x12\x10\n" +
	"\x03ttl\x18\x02 \x01(\x04R\x03ttl\x12\x14\n" +
	"\x05flags\x18\x04 \x01(\rR\x05flags\x12\x12\n" +
	"\x04hash\x18\x05 \x01(\x04R\x04hash\x12\x10\n" +
	"\x03key\x18\x06 \x01(\fR\x03key\x12\x14\n" +
	"\x05value\x18\a \x01(\fR\x05value\"L\n" +
	"\x10RaftStorageFlags\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x04R\x02id\x12\x14\n" +
	"\x05flags\x18\x02 \x01(\rR\x05flags\x12\x12\n" +
	"\x04mask\x18\x03 \x01(\rR\x04mask\"2\n" +
	"\x0eRaftStorageTtl\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\x04R\x02id\x12\x10\n" +
	"\x03ttl\x18\x02 \x01(\x04R\x03ttl\"~\n" +
	"\x11RaftCreateStorage\x12\x1d\n" +
	"\n" +
	"storage_id\x18\x01 \x01(\rR\tstorageId\x12J\n" +
	"\astorage\x18\x02 \x01(\v20.io.clbs.octopusmq.protobuf.CreateStorageRequestR\astorageB0Z.github.com/clbs-io/octopusmq/pkg/grpcraftcmdpbb\x06proto3"

var (
	file_raftcommands_proto_rawDescOnce sync.Once
	file_raftcommands_proto_rawDescData []byte
)

func file_raftcommands_proto_rawDescGZIP() []byte {
	file_raftcommands_proto_rawDescOnce.Do(func() {
		file_raftcommands_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_raftcommands_proto_rawDesc), len(file_raftcommands_proto_rawDesc)))
	})
	return file_raftcommands_proto_rawDescData
}

var file_raftcommands_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_raftcommands_proto_goTypes = []any{
	(*RaftCommand)(nil),                   // 0: io.clbs.octopusmq.grpc.raftcmd.RaftCommand
	(*RaftCreateQueue)(nil),               // 1: io.clbs.octopusmq.grpc.raftcmd.RaftCreateQueue
	(*RaftPauseResumeQueue)(nil),          // 2: io.clbs.octopusmq.grpc.raftcmd.RaftPauseResumeQueue
	(*RaftPurgeItems)(nil),                // 3: io.clbs.octopusmq.grpc.raftcmd.RaftPurgeItems
	(*RaftStartNoop)(nil),                 // 4: io.clbs.octopusmq.grpc.raftcmd.RaftStartNoop
	(*RaftStorageCommands)(nil),           // 5: io.clbs.octopusmq.grpc.raftcmd.RaftStorageCommands
	(*RaftStorageDeleteIds)(nil),          // 6: io.clbs.octopusmq.grpc.raftcmd.RaftStorageDeleteIds
	(*RaftStorageCommand)(nil),            // 7: io.clbs.octopusmq.grpc.raftcmd.RaftStorageCommand
	(*RaftStorageDelete)(nil),             // 8: io.clbs.octopusmq.grpc.raftcmd.RaftStorageDelete
	(*RaftStorageInsert)(nil),             // 9: io.clbs.octopusmq.grpc.raftcmd.RaftStorageInsert
	(*RaftStorageUpdate)(nil),             // 10: io.clbs.octopusmq.grpc.raftcmd.RaftStorageUpdate
	(*RaftStorageFlags)(nil),              // 11: io.clbs.octopusmq.grpc.raftcmd.RaftStorageFlags
	(*RaftStorageTtl)(nil),                // 12: io.clbs.octopusmq.grpc.raftcmd.RaftStorageTtl
	(*RaftCreateStorage)(nil),             // 13: io.clbs.octopusmq.grpc.raftcmd.RaftCreateStorage
	(*protobuf.DeleteQueueRequest)(nil),   // 14: io.clbs.octopusmq.protobuf.DeleteQueueRequest
	(*protobuf.ResizeQueueRequest)(nil),   // 15: io.clbs.octopusmq.protobuf.ResizeQueueRequest
	(*protobuf.DeleteStorageRequest)(nil), // 16: io.clbs.octopusmq.protobuf.DeleteStorageRequest
	(*protobuf.CreateQueueRequest)(nil),   // 17: io.clbs.octopusmq.protobuf.CreateQueueRequest
	(*timestamppb.Timestamp)(nil),         // 18: google.protobuf.Timestamp
	(*protobuf.CreateStorageRequest)(nil), // 19: io.clbs.octopusmq.protobuf.CreateStorageRequest
}
var file_raftcommands_proto_depIdxs = []int32{
	1,  // 0: io.clbs.octopusmq.grpc.raftcmd.RaftCommand.create_queue:type_name -> io.clbs.octopusmq.grpc.raftcmd.RaftCreateQueue
	14, // 1: io.clbs.octopusmq.grpc.raftcmd.RaftCommand.delete_queue:type_name -> io.clbs.octopusmq.protobuf.DeleteQueueRequest
	2,  // 2: io.clbs.octopusmq.grpc.raftcmd.RaftCommand.pause_resume_queue:type_name -> io.clbs.octopusmq.grpc.raftcmd.RaftPauseResumeQueue
	3,  // 3: io.clbs.octopusmq.grpc.raftcmd.RaftCommand.purge_items:type_name -> io.clbs.octopusmq.grpc.raftcmd.RaftPurgeItems
	5,  // 4: io.clbs.octopusmq.grpc.raftcmd.RaftCommand.storage_commands:type_name -> io.clbs.octopusmq.grpc.raftcmd.RaftStorageCommands
	6,  // 5: io.clbs.octopusmq.grpc.raftcmd.RaftCommand.storage_delete_ids:type_name -> io.clbs.octopusmq.grpc.raftcmd.RaftStorageDeleteIds
	4,  // 6: io.clbs.octopusmq.grpc.raftcmd.RaftCommand.start_noop:type_name -> io.clbs.octopusmq.grpc.raftcmd.RaftStartNoop
	15, // 7: io.clbs.octopusmq.grpc.raftcmd.RaftCommand.resize_queue:type_name -> io.clbs.octopusmq.protobuf.ResizeQueueRequest
	13, // 8: io.clbs.octopusmq.grpc.raftcmd.RaftCommand.create_storage:type_name -> io.clbs.octopusmq.grpc.raftcmd.RaftCreateStorage
	16, // 9: io.clbs.octopusmq.grpc.raftcmd.RaftCommand.delete_storage:type_name -> io.clbs.octopusmq.protobuf.DeleteStorageRequest
	17, // 10: io.clbs.octopusmq.grpc.raftcmd.RaftCreateQueue.queue:type_name -> io.clbs.octopusmq.protobuf.CreateQueueRequest
	18, // 11: io.clbs.octopusmq.grpc.raftcmd.RaftStartNoop.start_time:type_name -> google.protobuf.Timestamp
	7,  // 12: io.clbs.octopusmq.grpc.raftcmd.RaftStorageCommands.commands:type_name -> io.clbs.octopusmq.grpc.raftcmd.RaftStorageCommand
	8,  // 13: io.clbs.octopusmq.grpc.raftcmd.RaftStorageCommand.delete:type_name -> io.clbs.octopusmq.grpc.raftcmd.RaftStorageDelete
	9,  // 14: io.clbs.octopusmq.grpc.raftcmd.RaftStorageCommand.insert:type_name -> io.clbs.octopusmq.grpc.raftcmd.RaftStorageInsert
	11, // 15: io.clbs.octopusmq.grpc.raftcmd.RaftStorageCommand.flags:type_name -> io.clbs.octopusmq.grpc.raftcmd.RaftStorageFlags
	12, // 16: io.clbs.octopusmq.grpc.raftcmd.RaftStorageCommand.ttl:type_name -> io.clbs.octopusmq.grpc.raftcmd.RaftStorageTtl
	10, // 17: io.clbs.octopusmq.grpc.raftcmd.RaftStorageCommand.update:type_name -> io.clbs.octopusmq.grpc.raftcmd.RaftStorageUpdate
	19, // 18: io.clbs.octopusmq.grpc.raftcmd.RaftCreateStorage.storage:type_name -> io.clbs.octopusmq.protobuf.CreateStorageRequest
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_raftcommands_proto_init() }
func file_raftcommands_proto_init() {
	if File_raftcommands_proto != nil {
		return
	}
	file_raftcommands_proto_msgTypes[0].OneofWrappers = []any{
		(*RaftCommand_CreateQueue)(nil),
		(*RaftCommand_DeleteQueue)(nil),
		(*RaftCommand_PauseResumeQueue)(nil),
		(*RaftCommand_PurgeItems)(nil),
		(*RaftCommand_StorageCommands)(nil),
		(*RaftCommand_StorageDeleteIds)(nil),
		(*RaftCommand_StartNoop)(nil),
		(*RaftCommand_ResizeQueue)(nil),
		(*RaftCommand_CreateStorage)(nil),
		(*RaftCommand_DeleteStorage)(nil),
	}
	file_raftcommands_proto_msgTypes[7].OneofWrappers = []any{
		(*RaftStorageCommand_Delete)(nil),
		(*RaftStorageCommand_Insert)(nil),
		(*RaftStorageCommand_Flags)(nil),
		(*RaftStorageCommand_Ttl)(nil),
		(*RaftStorageCommand_Update)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_raftcommands_proto_rawDesc), len(file_raftcommands_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_raftcommands_proto_goTypes,
		DependencyIndexes: file_raftcommands_proto_depIdxs,
		MessageInfos:      file_raftcommands_proto_msgTypes,
	}.Build()
	File_raftcommands_proto = out.File
	file_raftcommands_proto_goTypes = nil
	file_raftcommands_proto_depIdxs = nil
}
