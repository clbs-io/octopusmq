// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: storage_management.proto

package grpcstoragemgmtpb

import (
	context "context"
	protobuf "github.com/clbs-io/octopusmq/api/protobuf"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StorageManagementService_CreateStorage_FullMethodName = "/io.clbs.octopusmq.grpc.management.StorageManagementService/CreateStorage"
	StorageManagementService_DeleteStorage_FullMethodName = "/io.clbs.octopusmq.grpc.management.StorageManagementService/DeleteStorage"
	StorageManagementService_ListStorages_FullMethodName  = "/io.clbs.octopusmq.grpc.management.StorageManagementService/ListStorages"
)

// StorageManagementServiceClient is the client API for StorageManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The service represents management on the storage.
type StorageManagementServiceClient interface {
	CreateStorage(ctx context.Context, in *protobuf.CreateStorageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteStorage(ctx context.Context, in *protobuf.DeleteStorageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListStorages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*protobuf.ListStoragesResponse, error)
}

type storageManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageManagementServiceClient(cc grpc.ClientConnInterface) StorageManagementServiceClient {
	return &storageManagementServiceClient{cc}
}

func (c *storageManagementServiceClient) CreateStorage(ctx context.Context, in *protobuf.CreateStorageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StorageManagementService_CreateStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageManagementServiceClient) DeleteStorage(ctx context.Context, in *protobuf.DeleteStorageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StorageManagementService_DeleteStorage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageManagementServiceClient) ListStorages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*protobuf.ListStoragesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(protobuf.ListStoragesResponse)
	err := c.cc.Invoke(ctx, StorageManagementService_ListStorages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageManagementServiceServer is the server API for StorageManagementService service.
// All implementations must embed UnimplementedStorageManagementServiceServer
// for forward compatibility.
//
// The service represents management on the storage.
type StorageManagementServiceServer interface {
	CreateStorage(context.Context, *protobuf.CreateStorageRequest) (*emptypb.Empty, error)
	DeleteStorage(context.Context, *protobuf.DeleteStorageRequest) (*emptypb.Empty, error)
	ListStorages(context.Context, *emptypb.Empty) (*protobuf.ListStoragesResponse, error)
	mustEmbedUnimplementedStorageManagementServiceServer()
}

// UnimplementedStorageManagementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStorageManagementServiceServer struct{}

func (UnimplementedStorageManagementServiceServer) CreateStorage(context.Context, *protobuf.CreateStorageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStorage not implemented")
}
func (UnimplementedStorageManagementServiceServer) DeleteStorage(context.Context, *protobuf.DeleteStorageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStorage not implemented")
}
func (UnimplementedStorageManagementServiceServer) ListStorages(context.Context, *emptypb.Empty) (*protobuf.ListStoragesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStorages not implemented")
}
func (UnimplementedStorageManagementServiceServer) mustEmbedUnimplementedStorageManagementServiceServer() {
}
func (UnimplementedStorageManagementServiceServer) testEmbeddedByValue() {}

// UnsafeStorageManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageManagementServiceServer will
// result in compilation errors.
type UnsafeStorageManagementServiceServer interface {
	mustEmbedUnimplementedStorageManagementServiceServer()
}

func RegisterStorageManagementServiceServer(s grpc.ServiceRegistrar, srv StorageManagementServiceServer) {
	// If the following call panics, it indicates UnimplementedStorageManagementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StorageManagementService_ServiceDesc, srv)
}

func _StorageManagementService_CreateStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.CreateStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageManagementServiceServer).CreateStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageManagementService_CreateStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageManagementServiceServer).CreateStorage(ctx, req.(*protobuf.CreateStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageManagementService_DeleteStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(protobuf.DeleteStorageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageManagementServiceServer).DeleteStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageManagementService_DeleteStorage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageManagementServiceServer).DeleteStorage(ctx, req.(*protobuf.DeleteStorageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageManagementService_ListStorages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageManagementServiceServer).ListStorages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageManagementService_ListStorages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageManagementServiceServer).ListStorages(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageManagementService_ServiceDesc is the grpc.ServiceDesc for StorageManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.clbs.octopusmq.grpc.management.StorageManagementService",
	HandlerType: (*StorageManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStorage",
			Handler:    _StorageManagementService_CreateStorage_Handler,
		},
		{
			MethodName: "DeleteStorage",
			Handler:    _StorageManagementService_DeleteStorage_Handler,
		},
		{
			MethodName: "ListStorages",
			Handler:    _StorageManagementService_ListStorages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage_management.proto",
}
