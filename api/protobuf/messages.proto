syntax = "proto3";
package io.clbs.octopusmq.protobuf;
option go_package = "github.com/clbs-io/octopusmq/api/protobuf";

import "google/protobuf/duration.proto";

message Item {
  // Unique identifier of the item. It is generated by the server.
  // ID is optional, for case when you are enqueueing new item
  // ID is not suppose to be set by the client, but is generated by the server.
  optional uint64 id = 1;
  // Priority of the item. The lower the value, the lower the priority.
  uint32 priority = 2;
  // Grouping key of the item. Items with the same key are grouped and returned together to the same receiver when the first groupped item hits the head.
  // For example, if the first item with key "A" is pulled, all items with key "A" will be returned to the same receiver immediately after the first item is pulled.
  // Grouping has higher priority than priority.
  bytes key = 3;
  // Payload of the item.
  bytes value = 4;
}

// EnqueueRequest contains the item to be prepended and duration of the timeout.
message EnqueueRequest {
  // The name of the queue.
  string queueName = 1;
  Item item = 2;
  google.protobuf.Duration timeout = 3;
}

message PushSubscribeRequest {
  oneof subreq {
    PushSubcribeRequestStart start = 1;
    PushSubscribeRequestItem item = 2;
  }
}

message PushSubcribeRequestStart {
  string queueName = 1;
  google.protobuf.Duration timeout = 2;
}

message PushSubscribeRequestItem {
  Item item = 1;
}

// EnqueueResponse sends back only item ID
message EnqueueResponse {
  uint64 id = 1;
}

// PullSingleRequest message contains duration, for how long should request wait for item if the queue is empty.
message PullSingleRequest {
  // The name of the queue.
  string queueName = 1;
  google.protobuf.Duration timeout = 2;
}

// PullSingleResponse message contains the item pulled from the queue.
message PullSingleResponse {
  Item item = 1;
}

// PullRequest message: batchSize: number of items to pull, timeout: for how long should request wait for items if the queue is empty.
message PullRequest {
  // The name of the queue.
  string queueName = 1;
  int32 batchSize = 2;
  google.protobuf.Duration timeout = 3;
}

// PullResponse message has array of pulled items.
message PullResponse {
  repeated Item items = 1;
}

// CommitSingleRequest
message CommitSingleRequest {
  // The name of the queue.
  string queueName = 1;
  uint64 id = 2;
}

// CommitSingleResponse returns true if the item was committed.
message CommitSingleResponse {
  bool committed = 1;
}

// CommitRequest sends an array of item IDs to commit.
message CommitRequest {
  // The name of the queue.
  string queueName = 1;
  repeated uint64 ids = 2;
}

// CommitResponse returns the number of items that were committed.
message CommitResponse {
  int32 ret = 1;
}

// RequeueSingleRequest message contains the ID of the item to requeue.
message RequeueSingleRequest {
  // The name of the queue.
  string queueName = 1;
  uint64 id = 2;
}

// RequeueSingleResponse message returns true if the item was requeued.
message RequeueSingleResponse {
  bool requeued = 1;
}

// RequeueRequest message sends an array of item IDs to requeue.
message RequeueRequest {
  // The name of the queue.
  string queueName = 1;
  repeated uint64 ids = 2;
}

// RequeueResponse message returns the number of items that were requeued.
message RequeueResponse {
  int32 ret = 1;
}

// DeleteSingleRequest message contains the ID of the item to delete.
message DeleteSingleRequest {
  // The name of the queue.
  string queueName = 1;
  uint64 id = 2;
}

// DeleteSingleResponse message returns true if the item was deleted.
message DeleteSingleResponse {
  bool deleted = 1;
}

// DeleteRequest message sends an array of item IDs to delete.
message DeleteRequest {
  // The name of the queue.
  string queueName = 1;
  repeated uint64 ids = 2;
}

// DeleteResponse message returns the number of items that were deleted.
message DeleteResponse {
  int32 ret = 1;
}

// SubscribeRequest message, register a streamed receiver for particular queue.
message SubscribeRequest {
  // The name of the queue.
  oneof subreq {
    SubscribeRequestStart start = 1;
    SubscribeRequestResponse response = 2;
  }
}

message SubscribeRequestStart {
  string queueName = 1;
  uint32 batchSize = 2;
}

message SubscribeRequestResponse {
  bool eof = 1;
  repeated uint64 commit = 2;
  repeated uint64 requeue = 3;
}

// SubscribeResponse message contains an array of items pulled from the queue.
message SubscribeResponse {
  repeated Item items = 1;
}

// CreateQueueRequest message contains the data to create a new queue.
message CreateQueueRequest {
  // Non-empty name of the queue.
  string queueName = 1;
  // Number of priorities, the lower the value, the higher the priority. The highest priority is 0, the lowest is 'priorities - 1'.
  uint32 priorities = 2;
  // Maximum number of items in the queue. If set to 0, the queue has no limit.
  uint32 maxSize = 3;
}

// DeleteQueueRequest message contains the identification of the queue to delete.
message DeleteQueueRequest {
  string queueName = 1;
}

// ListQueuesResponse message contains an array of queues that are running on the server.
message ListQueuesResponse {
  repeated ListItem queues = 1;
}

// ListItem message contains the queue info.
message ListItem {
  // Non-empty name of the queue.
  string queueName = 1;
  // Number of priorities, the lower the value, the higher the priority. The highest priority is 0, the lowest is 'priorities - 1'.
  uint32 priorities = 2;
  // Maximum number of items in the queue. If set to 0, the queue has no limit.
  uint32 maxSize = 3;
  // Number of items in the queue.
  uint32 count = 4;
  // Identifies whether the queue is paused.
  bool paused = 5;
}

// ResumeQueueRequest message contains the identification of the queue to resume.
message PauseQueueRequest {
  string queueName = 1;
}

// ResumeQueueRequest message contains the identification of the queue to resume.
message ResumeQueueRequest {
  string queueName = 1;
}