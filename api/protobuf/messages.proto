syntax = "proto3";
package io.clbs.octopusmq.protobuf;
option go_package = "github.com/clbs-io/octopusmq/api/protobuf";

import "google/protobuf/duration.proto";

message Item {
  // Unique identifier of the item. It is generated by the server.
  // ID is optional, for case when you are enqueueing new item
  // ID is not suppose to be set by the client, but is generated by the server.
  uint64 id = 1;
  // Priority of the item. The lower the value, the lower the priority.
  uint32 priority = 2;
  // Grouping key of the item. Items with the same key are grouped and returned together to the same receiver when the first groupped item hits the head.
  // For example, if the first item with key "A" is pulled, all items with key "A" will be returned to the same receiver immediately after the first item is pulled.
  // Grouping has higher priority than priority.
  bytes key = 3;
  // Payload of the item.
  bytes value = 4;
}

message InputItem {
  // In what duration item should be ready to pull, 0 for immediate pull.
  google.protobuf.Duration ttl = 1;
  // Priority of the item. The lower the value, the lower the priority.
  uint32 priority = 2;
  // Grouping key of the item. Items with the same key are grouped and returned together to the same receiver when the first groupped item hits the head.
  // For example, if the first item with key "A" is pulled, all items with key "A" will be returned to the same receiver immediately after the first item is pulled.
  // Grouping has higher priority than priority.
  bytes key = 3;
  // Payload of the item.
  bytes value = 4;
}

enum StatusCode {
  STATUS_CODE_OK = 0;
  STATUS_CODE_ERROR = 1;
  STATUS_CODE_TIMEOUT = 2;
  STATUS_CODE_NOT_FOUND = 3;
  STATUS_CODE_INVALID_ARGUMENT = 4;
  STATUS_CODE_ALREADY_EXISTS = 5;
  STATUS_CODE_QUEUE_NOT_FOUND = 6;
  STATUS_CODE_ITEM_BUSY = 7;
  STATUS_CODE_QUEUE_PAUSED = 8;
  STATUS_CODE_LEADER_SWITCH = 9;
  STATUS_CODE_STORAGE_NOT_FOUND = 10;
  STATUS_CODE_ITEM_NOT_BUSY = 11;
  STATUS_CODE_ITEM_NOT_FOUND = 12;
}

message QueueRequest {
  uint64 correlation_id = 1;
  oneof command {
    SetupRequest setup = 2;
    NoopRequest noop = 3;
    EnqueueRequest enqueue = 4;
    PullSingleRequest pull_single = 5;
    PullRequest pull = 6;
    CommitSingleRequest commit_single = 7;
    CommitRequest commit = 8;
    RequeueSingleRequest requeue_single = 9;
    RequeueRequest requeue = 10;
    DeleteSingleRequest delete_single = 11;
    DeleteRequest delete = 12;
  }
}

message QueueResponse {
  uint64 correlation_id = 1;
  oneof response {
    StatusResponse status = 2;
    EnqueueResponse enqueue = 3;
    PullSingleResponse pull_single = 4;
    PullResponse pull = 5;
    CommitSingleResponse commit_single = 6;
    CommitResponse commit = 7;
    RequeueSingleResponse requeue_single = 8;
    RequeueResponse requeue = 9;
    DeleteSingleResponse delete_single = 10;
    DeleteResponse delete = 11;
  }
}

message SetupRequest {
  string queue_name = 1;
}

message NoopRequest {
}

message StatusResponse {
  StatusCode code = 1;
  string message = 2;
}

// EnqueueRequest contains the item to be prepended and duration of the timeout.
message EnqueueRequest {
  InputItem item = 1;
  google.protobuf.Duration timeout = 2;
  bool prepend = 3;
  optional bool compress = 4;
}

// EnqueueResponse sends back only item ID
message EnqueueResponse {
  uint64 id = 1;
}

// PullSingleRequest message contains duration, for how long should request wait for item if the queue is empty.
message PullSingleRequest {
  google.protobuf.Duration timeout = 1;
}

// PullSingleResponse message contains the item pulled from the queue.
message PullSingleResponse {
  Item item = 1;
}

// PullRequest message: batchSize: number of items to pull, timeout: for how long should request wait for items if the queue is empty.
message PullRequest {
  int32 batch_size = 1;
  google.protobuf.Duration timeout = 2;
}

// PullResponse message has array of pulled items.
message PullResponse {
  repeated Item items = 1;
}

// CommitSingleRequest
message CommitSingleRequest {
  uint64 id = 1;
}

// CommitSingleResponse returns true if the item was committed.
message CommitSingleResponse {
  bool committed = 1;
}

// CommitRequest sends an array of item IDs to commit.
message CommitRequest {
  repeated uint64 ids = 1;
}

// CommitResponse returns the number of items that were committed.
message CommitResponse {
  int32 ret = 1;
}

// RequeueSingleRequest message contains the ID of the item to requeue.
message RequeueSingleRequest {
  RequeueItem item = 1;
}

// RequeueSingleResponse message returns true if the item was requeued.
message RequeueSingleResponse {
  bool requeued = 1;
}

// RequeueRequest message sends an array of item IDs to requeue.
message RequeueRequest {
  repeated RequeueItem items = 1;
}

// Requeue item consists of id and ttl as unix absolute time in ms when requeued item is ready to be pulled, 0 means immediately.
message RequeueItem {
  uint64 id = 1;
  google.protobuf.Duration ttl = 2;
}

// RequeueResponse message returns the number of items that were requeued.
message RequeueResponse {
  int32 ret = 1;
}

// DeleteSingleRequest message contains the ID of the item to delete.
message DeleteSingleRequest {
  uint64 id = 1;
}

// DeleteSingleResponse message returns true if the item was deleted.
message DeleteSingleResponse {
  bool deleted = 1;
}

// DeleteRequest message sends an array of item IDs to delete.
message DeleteRequest {
  repeated uint64 ids = 1;
}

// DeleteResponse message returns the number of items that were deleted.
message DeleteResponse {
  int32 ret = 1;
}

// Following messages are management related only

// CreateQueueRequest message contains the data to create a new queue.
message CreateQueueRequest {
  // Non-empty name of the queue.
  string queue_name = 1;
  // Number of priorities, the lower the value, the higher the priority. The highest priority is 0, the lowest is 'priorities - 1'.
  uint32 priorities = 2;
  // Maximum number of items in the queue. If set to 0, the queue has no limit.
  uint32 max_size = 3;
}

message ResizeQueueRequest {
  // Non-empty name of the queue.
  string queue_name = 1;
  // Maximum number of items in the queue. If set to 0, the queue has no limit.
  uint32 max_size = 2;
}

// DeleteQueueRequest message contains the identification of the queue to delete.
message DeleteQueueRequest {
  string queue_name = 1;
}

// ListQueuesResponse message contains an array of queues that are running on the server.
message ListQueuesResponse {
  repeated ListQueueItem queues = 1;
}

// ListQueueItem message contains the queue info.
message ListQueueItem {
  // Non-empty name of the queue.
  string queue_name = 1;
  // Number of priorities, the lower the value, the higher the priority. The highest priority is 0, the lowest is 'priorities - 1'.
  uint32 priorities = 2;
  // Maximum number of items in the queue. If set to 0, the queue has no limit.
  uint32 max_size = 3;
  // Number of items in the queue.
  uint32 count = 4;
  // Number of active unacknowledged items in the queue.
  uint32 active = 5;
  // Identifies whether the queue is paused.
  bool paused = 6;
}

// ResumeQueueRequest message contains the identification of the queue to resume.
message PauseQueueRequest {
  string queue_name = 1;
}

// ResumeQueueRequest message contains the identification of the queue to resume.
message ResumeQueueRequest {
  string queue_name = 1;
}

// storage management

message CreateStorageRequest {
  // Non-empty name of the storage.
  string storage_name = 1;
}

message DeleteStorageRequest {
  string storage_name = 1;
}

message ListStoragesResponse {
  repeated ListStorageItem storages = 1;
}

message ListStorageItem {
  // Non-empty name of the storage.
  string storage_name = 1;
  uint32 count = 2;
  uint32 active = 3;
}

message StorageRequest {
  uint64 correlation_id = 1;
  oneof command {
    StorageSetupRequest setup = 2;
    NoopRequest noop = 3;
    StorageSetRequest set = 4;
    StorageGetRequest get = 5;
    StorageDeleteRequest delete = 6;
    StorageLockAnyWithIdRequest lock_any_with_id = 7;
    StorageReleaseIdRequest release_id = 8;
    StorageGetKeysRequest get_keys = 9;
    StorageGetKeysNextRequest get_keys_next = 10;
  }
}

message StorageResponse {
  uint64 correlation_id = 1;
  oneof response {
    StatusResponse status = 2;
    StorageDataResponse data_response = 3;
    StorageGetKeysResponse get_keys_response = 4;
  }
}

message StorageSetupRequest {
  string storage_name = 1;
}

message StorageSetRequest {
  bytes key = 1;
  bytes value = 2;
  optional google.protobuf.Duration ttl = 3;
  optional bool compress = 4;
}

message StorageGetRequest {
  bytes key = 1;
}

message StorageDeleteRequest {
  bytes key = 1;
}

message StorageLockAnyWithIdRequest {
  google.protobuf.Duration timeout = 1;
}

message StorageReleaseIdRequest {
  uint64 id = 1;
  bool delete = 2;
}

message StorageGetKeysRequest {
  bool active_included = 1;
}

message StorageGetKeysNextRequest {
}

message StorageDataResponse {
  uint64 id = 1;
  bytes key = 2;
  bytes value = 3;
}

message StorageGetKeysResponse {
  repeated bytes keys = 1;
  bool more = 2;
}
